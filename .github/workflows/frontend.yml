name: Build and Deploy to S3 + CloudFront

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Prepare environment and install dependencies
        run: |
          cd public
          mv .env.example .env
          yarn

      - name: Build project
        run: |
          cd public
          CI=false yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create S3 bucket if not exists
        run: |
          BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Creating bucket $BUCKET_NAME in region $REGION..."
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION"
            else
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
          else
            echo "Bucket $BUCKET_NAME already exists."
          fi

          # Block all public access
          aws s3api put-public-access-block --bucket "$BUCKET_NAME" \
            --public-access-block-configuration '{
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            }'

      - name: Create or get CloudFront Distribution
        id: cloudfront
        run: |
          BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

          # Create OAI (Origin Access Identity) if not exists
          OAI_ID=$(aws cloudfront list-cloud-front-origin-access-identities \
            --query "CloudFrontOriginAccessIdentityList.Items[0].Id" --output text)
          if [ "$OAI_ID" = "None" ] || [ -z "$OAI_ID" ]; then
            OAI_ID=$(aws cloudfront create-cloud-front-origin-access-identity \
              --cloud-front-origin-access-identity-config CallerReference=$(date +%s),Comment="OAI for $BUCKET_NAME" \
              --query "CloudFrontOriginAccessIdentity.Id" --output text)
          fi
          echo "OAI_ID=$OAI_ID" >> $GITHUB_ENV

          # Update bucket policy to allow CloudFront OAI
          OAI_CANONICAL=$(aws cloudfront get-cloud-front-origin-access-identity \
            --id $OAI_ID --query "CloudFrontOriginAccessIdentity.S3CanonicalUserId" --output text)
          POLICY=$(cat <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "CanonicalUser": "$OAI_CANONICAL"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET_NAME/*"
              }
            ]
          }
          EOF
          )
          echo "$POLICY" > policy.json
          aws s3api put-bucket-policy --bucket "$BUCKET_NAME" --policy file://policy.json

          # Check if CloudFront distribution already exists
          DIST_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[?DomainName=='$BUCKET_NAME.s3.amazonaws.com']].Id" \
            --output text)

          if [ -z "$DIST_ID" ] || [ "$DIST_ID" = "None" ]; then
            echo "Creating CloudFront distribution..."
            DIST_ID=$(aws cloudfront create-distribution \
              --distribution-config "{
                \"CallerReference\": \"$(date +%s)\",
                \"Origins\": {
                  \"Items\": [
                    {
                      \"Id\": \"$BUCKET_NAME-origin\",
                      \"DomainName\": \"$BUCKET_NAME.s3.amazonaws.com\",
                      \"S3OriginConfig\": {\"OriginAccessIdentity\": \"origin-access-identity/cloudfront/$OAI_ID\"}
                    }
                  ],
                  \"Quantity\": 1
                },
                \"DefaultCacheBehavior\": {
                  \"TargetOriginId\": \"$BUCKET_NAME-origin\",
                  \"ViewerProtocolPolicy\": \"redirect-to-https\",
                  \"AllowedMethods\": {\"Quantity\": 2, \"Items\": [\"GET\",\"HEAD\"]},
                  \"ForwardedValues\": {\"QueryString\": false, \"Cookies\": {\"Forward\": \"none\"}},
                  \"TrustedSigners\": {\"Enabled\": false, \"Quantity\": 0},
                  \"MinTTL\": 0,
                  \"DefaultTTL\": 86400,
                  \"MaxTTL\": 31536000
                },
                \"Enabled\": true,
                \"Comment\": \"CloudFront for $BUCKET_NAME\"
              }" \
              --query "Distribution.Id" --output text)
          fi

          echo "DIST_ID=$DIST_ID" >> $GITHUB_ENV

      - name: Upload build folder to S3
        run: |
          aws s3 sync public/build s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $DIST_ID \
            --paths "/*"

      - name: Show CloudFront URL
        run: |
          CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id $DIST_ID \
            --query "Distribution.DomainName" --output text)
          echo "âœ… Your app is live at: https://$CLOUDFRONT_DOMAIN"
